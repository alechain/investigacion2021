mean(datos_norm=c(datos_norm[,6]))
mean(c(datos_norm[,6]))
mean(c(datos_norm[,4]))
mean(c(datos_norm[1:6,4]))
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
km_clusters$cluster
km_clusters$centers
print(km_clusters$centers)
km_clusters$centers
km_clusters$totss
km_clusters$withinss
km_clusters$tot.withinss
sumç(km_clusters$withinss)
sum(km_clusters$withinss)
km_clusters$size
km_clusters$iter
km_clusters$ifault
nomenclador
datos3
list(km_clusters$cluster)
list(clusterkm_clusters$cluster)
list(cluster<0km_clusters$cluster)
list(cluster=km_clusters$cluster)
trt<- km_clusters$cluster
aggregate(datos3,by = trt,FUN = median)
aggregate(datos3,by = list(trt),FUN = median)
pipi<-aggregate(datos3,by = list(trt),FUN = median)
View(pipi)
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
View(resumen_g)
resumen2<-data.frame(t(resumen_cluster))
View(resumen2)
resumen2<- resumen2 %>% rename("Region 1"=X1,"Region 2"=X2, "Region 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Region 1`<- formattable::comma((resumen2$`Region 1`),2)
resumen2$`Region 2`<- formattable::comma((resumen2$`Region 2`),2)
resumen2$`Region 3`<- formattable::comma((resumen2$`Region 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Region 1`<- resumen2b$`Region 1`*100
resumen2b$`Region 2`<- resumen2b$`Region 2`*100
resumen2b$`Region 3`<- resumen2b$`Region 3`*100
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
#agregamos a la base de datos original la denominación de cada cluster
datos<- cbind(datos,cluster=nomenclador)
clustersprov<-datos %>% select(Provincia,cluster)
datos %>% group_by(cluster) %>% summarise(habitantes=sum(`Habitantes (2010)`))
datos %>% group_by(cluster) %>% summarise(Provincia)
datos<- datos %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia)) %>% arrange(Provincia)
names(km_clusters[1])
View(datos)
datos %>% group_by(cluster) %>% summarise(Provincia)
#tikz(file = "regiones_resultantes.tex", sanitize = TRUE,width = 6,height = 4)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6) + labs(title="") + theme(text=element_text(),  title = element_text(face = "bold"),axis.text = element_text(color = "BLACK", size = 5) , axis.title = element_text(size = 5),panel.background = element_blank(), axis.line.x.bottom = element_line(color = "BLACK"), axis.line.y.left = element_line(color="BLACK"))
#dev.off()
#tikz(file = "regiones_resultantes.tex", sanitize = TRUE,width = 6,height = 4)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = FALSE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6) + labs(title="") + theme(text=element_text(),  title = element_text(face = "bold"),axis.text = element_text(color = "BLACK", size = 5) , axis.title = element_text(size = 5),panel.background = element_blank(), axis.line.x.bottom = element_line(color = "BLACK"), axis.line.y.left = element_line(color="BLACK"))
#dev.off()
#tikz(file = "regiones_resultantes.tex", sanitize = TRUE,width = 6,height = 4)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6) + labs(title="") + theme(text=element_text(),  title = element_text(face = "bold"),axis.text = element_text(color = "BLACK", size = 5) , axis.title = element_text(size = 5),panel.background = element_blank(), axis.line.x.bottom = element_line(color = "BLACK"), axis.line.y.left = element_line(color="BLACK"))
#dev.off()
base::svd(datos3)
length(base::svd(datos3))
svd_1<-base::svd(datos3)
View(svd_1)
View(svd_1$u)
lenght(svd_1$u)
length(svd_1$u)
u_matrix<- svd$u
u_matrix<- svd_1$u
u_matrix<- (svd_1$u[1:24,1:2])
tibble(u_matrix)
datos3
View(datos3)
matrix(datos3)
as_matrix(datos3)
as.matrix(datos3)
x_matrix<- as.matrix(datos3)
x_matrix
t(x_matrix)
x_matrix_t=t(x_matrix)
u_matrix*x_matrix_t
x_matrix
t(x_matrix)
x_matrix
matrix(x_matrix)
x_matrix(matrix(x_matrix))
x_matrix<-(matrix(x_matrix))
x_matrix=as.matrix.default(datos3)
x_matrix=as.matrix(datos3)
x_matrix=t(as.matrix(datos3))
datos3
View(datos3)
x_matrix=as.matrix(datos3)
x_matrix_t=t(x_matrix)
sim(x_matrix)
dim(x_matrix)
dim(x_matrix_t)
u_matrix
dim(u_matrix)
dim(t(u_matrix))
t(u_matrix)*x_matrix
t(u_matrix)%*%x_matrix
pca_angau<-t(u_matrix)%*%x_matrix
pca_angau<- tibble(pca_angau)
View(pca_angau)
pca_angau<-t(u_matrix)%*%x_matrix
datos3
datos
datos_norm
# probando a manopla pca
svd_datos<- svd(datos_norm)
svd_datos$u
u_matrix<- svd_datos$u
u_matrix_2d<- u_matrix[1:24,1:2]
u_matrix_2d_t<- t(u_matrix_2d)
x_matrix<- datos_norm
dot_prod<- u_matrix_2d_t%*%x_matrix
dot_prod
dot_prod<- tibble(dot_prod)
dot_prod<- as.data.frame(dot_prod)
dot_prod<- u_matrix_2d_t%*%x_matrix
dot_prod<- as.data.frame(dot_prod)
View(dot_prod)
dot_prod<- u_matrix_2d_t%*%x_matrix
dot_prod<- as.data.frame(t(dot_prod))
View(dot_prod)
dot_prod %>% remove_rownames()
dot_prod<-dot_prod %>% remove_rownames()
View(datos4)
View(datos)
dot_prod$provincia<-datos$Provincia
dot_prod %>% ggplot(mapping = aes(x=V1,y=V2)) +geom_point()
dot_prod %>% ggplot(mapping = aes(x=V1,y=V2, label=provincia)) +geom_point() + geom_text()
provincia<- read.csv("provincias.csv", sep=",", header = T, encoding = "UTF-8")
View(provincia)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
nombredato<- datos %>% select(Provincia)
nombredato
View(nombredato)
name_prov_para_datos<-bind_cols(nombredato, provincia)
View(name_prov_para_datos)
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
View(datos)
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename(provincia_origen=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch16<-cluster_nombres_eph %>% select(provincia_origen,CH16_COD, cluster_origen)
View(cluster_nombres_eph_ch16)
ephinmi<- ephtotal %>% filter(CH16==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch16)
View(ephinmi)
provincia<- read.csv("provincias.csv", sep=",", header = T, encoding = "UTF-8")
View(provincia)
View(cluster_nombres_eph)
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(provincia_origen,cluster_origen) %>% rename(provincia_destino=provincia_origen, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
cluster_destino
ephinmi<- left_join(ephinmi,cluster_destino)
View(name_prov_para_datos)
View(prov_por_aglo)
cuadro_4<- ephinmi %>% group_by("Provincia"=provincia_destino) %>% summarise("Inmigrantes"=sum(PONDERA))
cuadro_5<- ephinmi %>% group_by("Provincia"=provincia_origen) %>% summarise("Emigrantes"=sum(PONDERA))
cuadro_6<- full_join(cuadro_4,cuadro_5)
######
prov_aglo<- prov_por_aglo %>% rename(provincia=provincia_destino)
ephtotal<- left_join(ephtotal, prov_aglo)
View(clustersprov)
ephtotal %>% count()
ephtotal %>% filter(CH16==3) %>% count()
ephtotal %>% filter(CH16==3 & !is.null(CH16_COD)) %>% count()
ephtotal %>% filter(CH16==3 & !is.na(CH16_COD)) %>% count()
ephtotal %>% filter(CH16==3 & !is.na(CH16_COD)) %>% count()
ephtotal %>% filter(CH16==3 )) %>% count()
ephtotal %>% filter(CH16==3 ) %>% count()
ephtotal %>% count()
ephtotal %>% count() %>% pull()
ephtotal %>% filter(CH16==3 ) %>% count() %>% pull()/ephtotal %>% count() %>% pull()
ephtotal %>% filter(CH15  %in% c(1,2,3)) %>% count() %>% pull()
ilter(CH15  %in% c(1,2,3))  %>% count() %>% pull()
ephtotal %>% filter(CH16==3 ) %>% count() %>% pull()/ephtotal%>% filter(CH15  %in% c(1,2,3))  %>% count() %>% pull()
ephtotal %>% filter(CH15  %in% c(1,2,3)) %>% summarise(sum(PONDERA)) %>% pull()
ephtotal %>% filter(CH16==3 ) %>% summarise(sum(PONDERA)) %>% pull()/ephtotal%>% filter(CH15  %in% c(1,2,3))  %>% summarise(sum(PONDERA)) %>% pull()
ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA))
#######
cuadro_7<- ephtotal %>% group_by("Provincia"=provincia) %>% summarise("Poblacion"=sum(PONDERA)) %>% mean()
#######
cuadro_7<- ephtotal %>% group_by("Provincia"=provincia) %>% summarise("Poblacion"=sum(PONDERA))
ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA), n())
ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA))
ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA), length())
ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA))
cantidad_migrantes<-ephtotal %>% filter(CH16==3 ) %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA))
mean(cantidad_migrantes$`sum(PONDERA)`)
cantidad_migrantes<-ephtotal  %>% group_by(ANO4,TRIMESTRE) %>% summarise(sum(PONDERA[CH16==3]))
mean(cantidad_migrantes$`sum(PONDERA)`)
cantidad_migrantes
mean(cantidad_migrantes$`sum(PONDERA[CH16 == 3])`
mean(cantidad_migrantes$`sum(PONDERA[CH16 == 3])`)
cantidad_migrantes<-ephtotal  %>% group_by(ANO4,TRIMESTRE) %>% summarise(migrantes_int=sum(PONDERA[CH16==3]), total_pob=sum(PONDERA))
cantidad_migrantes
cantidad_migrantes %>% mutate(tasa_mig=migrantes_int/total_pob)
cantidad_migrantes %>% mutate(tasa_mig=formattable::percent(migrantes_int/total_pob))
ephtotal %>% filter(ANO4==2016 & TRIMESTRE==2) %>% group_by(provincia) %>% summarise(sum(PONDERA))
provin_migs<-ephtotal %>% filter(ANO4==2016 & TRIMESTRE==2) %>% group_by(provincia) %>% summarise(sum(PONDERA))
provin_migs %>% summarise(sum(`sum(PONDERA)`))
cantidad_migrantes<-ephtotal  %>% group_by(ANO4,TRIMESTRE) %>% summarise(migrantes_int=sum(PONDERA[CH16==3]), total_pob=sum(PONDERA))
cantidad_migrantes
#setwd("/home/alejandrochain/Documentos/GitHub/investigacion2021/macrolocalizacion")
#librerias y fuentes necesarias
# Instalar los paquetes necesarios antes de correr el script
knitr::opts_chunk$set(echo = FALSE, dev="cairo_pdf", fig.cap = TRUE)
library(readr)
library(tidyverse)
library(factoextra)
library(cluster)
library(fpc)
library(stargazer)
library(xtable)
library(extrafont)
library(eph)
library(readxl)
library(sf)
library(tmap)
library(tmaptools)
library(nnet)
library(formattable)
#paleta de colores
color<- c('#e41a1c','#377eb8','#4daf4a','#a6cee3','#4575b4','#f781bf','#a65628','#ffff33','#984ea3','#ff7f00','#f781bf')
#descarga  de base de datos de eph individual y hogar desde el 2do trimestre 2016 hasta 4to trimestre 2019
## Individual
ephi<- get_microdata(year=2017:2019, trimester = 1:4, type = "individual")
ephi<- ephi %>%
dplyr::select(microdata) %>%
tidyr::unnest(cols = c(microdata))
### 2016
ephi2<- get_microdata(year=2016, trimester = 2:4, type = "individual")
ephi2<- ephi2 %>%
dplyr::select(microdata) %>%
tidyr::unnest(cols = c(microdata))
ephi<- bind_rows(ephi,ephi2)
ephi<- ephi %>% arrange(-ANO4, -TRIMESTRE)
## Hogar
ephh<- get_microdata(year=2017:2019, trimester = 1:4, type = "hogar")
ephh<- ephh %>%
dplyr::select(microdata) %>%
tidyr::unnest(cols = c(microdata))
### 2016
ephh2<- get_microdata(year=2016, trimester = 2:4, type = "hogar")
ephh2<- ephh2 %>%
dplyr::select(microdata) %>%
tidyr::unnest(cols = c(microdata))
ephh<- bind_rows(ephh,ephh2)
ephh<- ephh %>% arrange(-ANO4, -TRIMESTRE)
### mergeado
ephtotal<- left_join(ephi,ephh)
rm(list = c("ephh","ephh2","ephi","ephi2"))
### descargamos la descripcion de los aglomerados
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/raw/main/macrolocalizacion/aglomerado.xlsx", temp)
aglomerado<- read_excel(temp,sheet = 4)
unlink(temp)
### descargamos la descripción de los sectores
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/raw/main/macrolocalizacion/SECTORESCAES.csv", temp)
sectorcaes<- read.csv(temp, sep=",", header = T, encoding = "UTF-8", colClasses = "character")
unlink(temp)
### descargamos las provincias por aglomerados
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/raw/main/macrolocalizacion/provincias.csv", temp)
provincia<- read.csv(temp, sep=",", header = T)
unlink(temp)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#definimos variables y unimos la base
ephtotal<- ephtotal %>% filter(ESTADO!=0) %>%  mutate(Sexo=as.character(CH04),
Sexo=case_when(Sexo=="1" ~ "Hombres",
Sexo=="2" ~ "Mujeres"),
PP04D_COD = case_when(nchar(PP04D_COD) == 5 ~ PP04D_COD,
nchar(PP04D_COD) == 4 ~ paste0("0", PP04D_COD),
nchar(PP04D_COD) == 3 ~ paste0("00", PP04D_COD),
nchar(PP04D_COD) == 2 ~ paste0("000", PP04D_COD),
nchar(PP04D_COD) == 1 ~ paste0("0000", PP04D_COD)),
CALIFICACION = substr(PP04D_COD, 5, 5),
JERARQUIA = substr(PP04D_COD, 3, 3),
JERARQUIA = case_when(JERARQUIA=="0" ~ "Dirección",
JERARQUIA=="2" ~ "Jefes",
JERARQUIA=="1" ~ "Cuentapropia",
JERARQUIA=="3" ~ "Trabajadores\nAsalariados"),
JERARQUIA = factor(JERARQUIA, c("Dirección", "Jefes", "Trabajadores\nAsalariados", "Cuentapropia")),
PEA= case_when(ESTADO==3 ~ 0,
ESTADO==4 ~ 0,
ESTADO==1 ~ 1,
ESTADO==2 ~ 1),
PP04D_COD = as.character(PP04D_COD),
CALIFICACION = case_when(CALIFICACION=="1" ~ "Profesionales",
CALIFICACION=="2" ~ "Técnicos",
CALIFICACION=="3" ~ "Operativos",
CALIFICACION=="4" ~ "No Calificados"),
CALIFICACION = factor(CALIFICACION, c("No Calificados", "Operativos", "Técnicos", "Profesionales")),
PP04B_COD=as.character(PP04B_COD),
PP04B_COD=case_when(nchar(PP04B_COD)==4~PP04B_COD,
nchar(PP04B_COD)==1~ paste0("0",PP04B_COD,"00"),
nchar(PP04B_COD)==2~ paste0(PP04B_COD,"00"),
nchar(PP04B_COD)==3~ paste0("0",PP04B_COD)),
SECTOR= substr(PP04B_COD,1,2),
HORASSEM=PP3E_TOT+PP3F_TOT,
niveled=case_when(NIVEL_ED==1 | NIVEL_ED==7 ~ "Sin\ninstrucción",
NIVEL_ED %in% c(2,3) ~ "Primario\nCompleto",
NIVEL_ED %in% c(4,5)~ "Secundario\nCompleto",
NIVEL_ED == 6 ~ "Superior/Universitario\ncompleto"),
niveled=factor(niveled, levels = c("Sin\ninstrucción","Primario\nCompleto","Secundario\nCompleto","Superior/Universitario\ncompleto")))
# unimos los aglomerados y sectores para cada individuo
ephtotal<- left_join(ephtotal,aglomerado)
ephtotal<- left_join(ephtotal, sectorcaes)
## Carga de datos
##Para comenzar, cargamos los factores de macrolocalizacion de las variables sociales y economicas que definen a las distintas ##provincias de la Argentina.
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/raw/main/macrolocalizacion/macroloc_para_r.csv", temp)
macroloc<- read_csv(temp,col_names = T, row.names(1))
unlink(temp)
macroloc_sin_prov<- macroloc %>% select(-Provincia)
row.names(macroloc_sin_prov)<- macroloc$Provincia
macroloc_sin_prov_2<- macroloc_sin_prov
#datos<- datos %>% mutate(`Densidad poblacional: Hab/km² (2010)`=log(`Densidad poblacional: Hab/km² (2010)`))
## Normalización de la base de datos
#Ahora normalizamos la base de datos para lograr coherencia en la aplicación de K-means, debido a quen trabajamos con distintas escalas de datos.
macroloc_sin_prov<-macroloc_sin_prov %>% select(-c(`Densidad poblacional: Hab/km² (2010)`))
macroloc_norm<- scale(macroloc_sin_prov)
library(tikzDevice)
#tikz(file = "/home/alejandrochain/Documentos/GitHub/investigacion2021/latex_regiones_class/graficos/regiones_optimas.tex", width = 6, height = 3)
factoextra::fviz_nbclust(macroloc_norm,kmeans, method="wss")+ geom_vline(xintercept = 3, colour="RED", linetype="dotted") + theme_classic() + labs(title="") + xlab("Número de clusters") + ylab("WSS")+ theme(text=element_text(), title = element_text(face = "bold"),axis.text = element_text(color = "BLACK") , axis.title = element_text(),panel.background = element_blank())
#dev.off()
set.seed(1118)
km_clusters<- kmeans(macroloc_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
#Podemos ver la media de los parámetros para cada uno de los clusters
resumen_cluster<-aggregate(macroloc_sin_prov,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Region 1"=X1,"Region 2"=X2, "Region 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
#resumen2$`Region 1`<- formattable::comma((resumen2$`Region 1`),2)
#resumen2$`Region 2`<- formattable::comma((resumen2$`Region 2`),2)
#resumen2$`Region 3`<- formattable::comma((resumen2$`Region 3`),2)
resumen2b<- resumen2[14:18,]
resumen2b$`Region 1`<- resumen2b$`Region 1`*100
resumen2b$`Region 2`<- resumen2b$`Region 2`*100
resumen2b$`Region 3`<- resumen2b$`Region 3`*100
resumen2a<- resumen2[1:13,]
resumen2<- bind_rows(resumen2a, resumen2b)
#
kableExtra::kable(resumen2,format = "html",caption = "Resumen de indicadores por cluster")
#agregamos a la base de datos original la denominación de cada cluster
macroloc<- cbind(macroloc,cluster=nomenclador)
clustersprov<-macroloc %>% select(Provincia,cluster)
macroloc %>% group_by(cluster) %>% summarise(habitantes=sum(`Habitantes (2010)`))
macroloc %>% group_by(cluster) %>% summarise(Provincia)
macroloc<- macroloc %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia)) %>% arrange(Provincia)
names(km_clusters[1])
#tikz(file = "/home/alejandrochain/Documentos/GitHub/investigacion2021/latex_regiones_class/graficos/regiones_resultantes.tex", sanitize = TRUE,width = 6,height = 4)
fviz_cluster(km_clusters, data = macroloc_sin_prov_2,
palette = color,
ellipse.type = "euclid",
star.plot = TRUE,
repel = TRUE,
labelsize = 6) + labs(title="") + theme(text=element_text(), legend.position = 'bottom', title = element_text(face = "bold"),axis.text = element_text(color = "BLACK", size = 5) , axis.title = element_text(size = 5),panel.background = element_blank(), axis.line.x.bottom = element_line(color = "BLACK"), axis.line.y.left = element_line(color="BLACK"))
#dev.off()
cuadro_4<- ephinmi %>% group_by("Provincia"=provincia_destino) %>% summarise("Inmigrantes"=sum(PONDERA))
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- macroloc %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
macroloc<- left_join(macroloc,name_prov_para_datos)
#
cluster_nombres_eph<- macroloc %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename(provincia_origen=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch16<-cluster_nombres_eph %>% select(provincia_origen,CH16_COD, cluster_origen)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH16==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch16)
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/raw/main/macrolocalizacion/provincias_por_aglomerado.csv", temp)
prov_por_aglo<- read_csv(temp)
unlink(temp)
cluster_destino<- cluster_nombres_eph %>% select(provincia_origen,cluster_origen) %>% rename(provincia_destino=provincia_origen, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
View(cluster_destino)
View(cluster_nombres_eph)
cuadro_4<- ephinmi %>% group_by("Provincia"=provincia_destino) %>% summarise("Inmigrantes"=sum(PONDERA))
cuadro_5<- ephinmi %>% group_by("Provincia"=provincia_origen) %>% summarise("Emigrantes"=sum(PONDERA))
View(cuadro_4)
sum(cuadro_4$Inmigrantes)
#Creación de regresores
#Cargamos deflatores
unlink(temp)
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/blob/main/macrolocalizacion/deflactor.csv",temp)
deflactor<- read_csv("deflactor.csv")
unlink(temp)
#Cargamos canastas para calcular pobreza
temp<- tempfile()
download.file("https://github.com/alechain/investigacion2021/blob/main/macrolocalizacion/canasta.csv",temp)
canastas<- read.csv("canasta.csv", sep=";", dec=".", header = TRUE)
unlink(temp)
ephtotal<- left_join(ephtotal, deflactor)
ephtotal<- ephtotal %>% mutate(HIJO=case_when(CH03==3~1,
TRUE ~ 0))
ephtotal<- ephtotal %>% group_by(ANO4, TRIMESTRE, CODUSU,NRO_HOGAR) %>% mutate(HIJO_HOGAR=sum(HIJO)) %>% ungroup()
ephtotal<- left_join(ephtotal,eph::adulto_equivalente)
ephtotal<- left_join(ephtotal,canastas)
ephtotal<- ephtotal %>% group_by(ANO4, TRIMESTRE, CODUSU,NRO_HOGAR) %>% mutate(EAF=sum(adequi)) %>% ungroup()
ephtotal<- ephtotal %>% mutate(CBAEQ=CBA*EAF,
CBTEQ=CBT*EAF)
#Creamos la variable pobre
ephtotal<- ephtotal %>% mutate(condicion=case_when(ITF<CBAEQ ~ "Indigente",
ITF>=CBAEQ & ITF<CBTEQ ~ "Pobre",
ITF>=CBTEQ ~ "No Pobre"))
ephtotal<- ephtotal %>% mutate(hombre=case_when(Sexo=="Hombres"~1,
Sexo=="Mujeres"~0),
edad=case_when(CH06=="-1" ~ as.integer(1),
TRUE ~ as.integer(CH06)),
edad2=(edad)^2,
ledad=log(edad),
medio=case_when(niveled=="Secundario\nCompleto"~ 1,
TRUE ~ 0),
alto=case_when(niveled=="Superior/Universitario\ncompleto"~ 1,
TRUE ~ 0),
ING_LAB_REAL=P21/DEFLACTOR,
ING_LAB_HOR=ING_LAB_REAL/PP3E_TOT,
IPCFR=IPCF/DEFLACTOR,
IPCFRL=log(IPCFR),
OCUPADO_BAJO=case_when(ESTADO==1 & CALIFICACION %in% c("No Calificados", "Operativos") ~ 1,
TRUE ~ 0),
OCUPADO_ALTO=case_when(ESTADO==1 & CALIFICACION %in% c("Profesionales","Técnicos") ~ 1,
TRUE ~ 0),
PROPIETARIO=case_when(II7==1 | II7==2 ~ 1,
TRUE ~ 0),
HIJO_DUMMY=case_when(HIJO_HOGAR==0 ~ 0,
TRUE ~ 1),
CASADO= case_when(CH07==1 | CH07==2 ~ 1 ,
TRUE ~ 0),
SOLTERO_C_HIJO=case_when(CASADO==0 & HIJO_DUMMY==1~1,
TRUE~0),
CASADO_S_HIJO=case_when(CASADO==1 & HIJO_DUMMY==0~ 1,
TRUE ~ 0),
CASADO_C_HIJO=case_when(CASADO==1 & HIJO_DUMMY==1~1,
TRUE~0),
POBRE=case_when(condicion %in% c("Pobre","Indigente")~1,
TRUE ~ 0),
SUBSIDIO=case_when(V5==1 ~ 1,
TRUE ~ 0)
)
#tomamos la base completa y definimos el cluster de destino para los migrantes
data_migracion<- left_join(ephtotal,cluster_destino)
#hacemos lo mismo con el cluster de origen de los migrantes
data_migracion<- left_join(data_migracion,cluster_nombres_eph_ch16)
data_migracion<- data_migracion %>% filter(CH03==1)
data_migracion<- data_migracion %>% filter(CH16 %in% c(1,2,3))
data_migracion<- data_migracion %>% mutate(migrante=case_when(CH16==3 ~ 1,
TRUE ~ 0),
nativo=case_when(CH16 %in% c(1,2) & CH15 %in% c(1,2) ~ 1,
TRUE ~ 0))
data_migracion<- data_migracion %>% mutate(inmigrante=case_when(migrante==1 ~ 1,
nativo==1 ~ 0),
SUR_destino=case_when(cluster_destino==1 ~ 1,
TRUE ~ 0),
CENTRO_destino=case_when(cluster_destino==3    ~ 1,
TRUE ~ 0))
data_migracion<- data_migracion %>% filter(!is.na(inmigrante))
#modelo_a_logit<- glm(inmigrante ~ hombre +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO  + edad + edad2   , data=data_migracion,family = 'binomial')
#modelo_b_logit<- glm(inmigrante ~ hombre +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO + edad + edad2+   POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO + PROPIETARIO+medio + alto, data=data_migracion,family = 'binomial')
#modelo_c_logit<- glm(inmigrante ~ hombre +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO + edad + edad2+   POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO + PROPIETARIO+medio + alto + SUR_destino + CENTRO_destino, data=data_migracion,family = 'binomial')
modelo_a_logit<- glm(inmigrante ~ hombre + CASADO+ HIJO_DUMMY + edad + edad2   , data=data_migracion,family = 'binomial')
modelo_b_logit<- glm(inmigrante ~ hombre +  CASADO+ HIJO_DUMMY + edad + edad2+   POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO + PROPIETARIO+medio + alto, data=data_migracion,family = 'binomial')
modelo_c_logit<- glm(inmigrante ~ hombre + CASADO+ HIJO_DUMMY + edad + edad2+   POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO + PROPIETARIO+medio + alto + SUR_destino + CENTRO_destino, data=data_migracion,family = 'binomial')
#summary(logit_migracion)
stargazer(modelo_a_logit,modelo_b_logit,modelo_c_logit,type = 'text' )
stargazer(modelo_a_logit,modelo_b_logit,modelo_c_logit,type = 'latex' )
