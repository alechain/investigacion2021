HORASSEM=PP3E_TOT+PP3F_TOT,
niveled=case_when(NIVEL_ED==1 | NIVEL_ED==7 ~ "Sin\ninstrucción",
NIVEL_ED %in% c(2,3) ~ "Primario\nCompleto",
NIVEL_ED %in% c(4,5)~ "Secundario\nCompleto",
NIVEL_ED == 6 ~ "Superior/Universitario\ncompleto"),
niveled=factor(niveled, levels = c("Sin\ninstrucción","Primario\nCompleto","Secundario\nCompleto","Superior/Universitario\ncompleto")))
ephtotal<- left_join(ephtotal,aglomerado)
ephtotal<- left_join(ephtotal, sectorcaes)
## Carga de datos
##Para comenzar, cargamos los datos de las variables sociales y economicas que definen a las distintas provincias de la Argentina.
datos<- read_csv("macroloc_para_r.csv",col_names = T, row.names(1))
datos3<- datos %>% select(-Provincia)
row.names(datos3)<- datos$Provincia
datos4<- datos3
#datos<- datos %>% mutate(`Densidad poblacional: Hab/km² (2010)`=log(`Densidad poblacional: Hab/km² (2010)`))
## Normalización de la base de datos
#Ahora normalizamos la base de datos para lograr coherencia en la aplicación de K-means, debido a quen trabajamos con distintas escalas de #datos.
datos3<-datos3 %>% select(-c(`Densidad poblacional: Hab/km² (2010)`))
datos_norm<- scale(datos3)
factoextra::fviz_nbclust(datos_norm,kmeans, method="wss")+ geom_vline(xintercept = 3, colour="RED", linetype="dotted") + theme_classic() + labs(title="Numero óptimo de clusters") + xlab("Número de clusters") + ylab("WSS")+ theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster")
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2$`Cluster 1`[1]<- formattable::comma((resumen2$`Cluster 1`[1]),0)
resumen2$`Cluster 2`[1]<- formattable::comma((resumen2$`Cluster 2`[1]),0)
resumen2$`Cluster 3`[1]<- formattable::comma((resumen2$`Cluster 3`[1]),0)
resumen2
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
View(datos3)
View(km_clusters)
km_clusters$cluster
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
View(resumen_cluster)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
View(resumen_g)
resumen2<-data.frame(t(resumen_cluster))
View(resumen2)
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2[Indicadores=="Porcentaje de empleados en Industria (2016-2019)"]
resumen2[Indicadores]
resumen2[Indicadores,]
resumen2$Indicadores[=="Porcentaje de empleados en Industria (2016-2019)"]
resumen2$Indicadores["Porcentaje de empleados en Industria (2016-2019)"]
resumen2$Indicadores[]
resumen2$Indicadores[14]
resumen2[14]
resumen2[,14]
resumen2[]
resumen2[:,3]
resumen2[30,]
resumen2[16,]
resumen2[16,2:4]
resumen2[16,2:4][]
resumen2[16,2:4]<- formattable::percent(resumen2[16,2:4])
resumen2$Indicadores
resumen2$Indicadores[3]
resumen2[2,3]
resumen2[16:18,3]
resumen2[14:16,2:4]
resumen2[14:16,2:4]<- formattable::percent(resumen2[14:16,2:4])
resumen2[14]<- formattable::percent(resumen2[14:16,2:4])
resumen2$`Cluster 1`
resumen2$`Cluster 1`[14:16]
resumen2$`Cluster 1`[14:16]<- formattable::percent(resumen2$`Cluster 1`[14:16])
resumen2
resumen2<- resumen2 %>% mutate(`Cluster 1`=case_when(Indicadores=="Porcentaje de empleados en Agricultura, ganadería, pesca y actividades extractivas (2016-2019)" ~ formattable::percent(`Cluster 1`),
TRUE ~ `Cluster 1`))
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2<- resumen2 %>% mutate(`Cluster 1`=case_when(Indicadores=="Porcentaje de empleados en Agricultura, ganadería, pesca y actividades extractivas (2016-2019)" ~ formattable::percent(`Cluster 1`),
TRUE ~ `Cluster 1`))
resumen2b<- resumen2[14:16,]
View(resumen2b)
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Cluster 1`<- formattable::percent(resumen2b$`Cluster 1`,2)
resumen2<- esumen2[1:13,]
resumen2<- resumen2[1:13,]
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Cluster 1`<- formattable::percent(resumen2b$`Cluster 1`,2)
resumen2b$`Cluster 2`<- formattable::percent(resumen2b$`Cluster 2`,2)
resumen2b$`Cluster 3`<- formattable::percent(resumen2b$`Cluster 3`,2)
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
resumen2b<- resumen2[14:16,]
resumen2b$`Cluster 1`<- resumen2b$`Cluster 1`*100
resumen2b$`Cluster 2`<- resumen2b$`Cluster 2`*100
resumen2b$`Cluster 3`<- resumen2b$`Cluster 3`*100
View(resumen2b)
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
View(resumen2)
View(datos3)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
#Podemos ver la media de los parámetros para cada uno de los clusters
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Cluster 1`<- resumen2b$`Cluster 1`*100
resumen2b$`Cluster 2`<- resumen2b$`Cluster 2`*100
resumen2b$`Cluster 3`<- resumen2b$`Cluster 3`*100
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
#Podemos ver la media de los parámetros para cada uno de los clusters
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Cluster 1`<- resumen2b$`Cluster 1`*100
resumen2b$`Cluster 2`<- resumen2b$`Cluster 2`*100
resumen2b$`Cluster 3`<- resumen2b$`Cluster 3`*100
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
#agregamos a la base de datos original la denominación de cada cluster
datos<- cbind(datos,cluster=nomenclador)
clustersprov<-datos %>% select(Provincia,cluster)
datos %>% group_by(cluster) %>% summarise(habitantes=sum(`Habitantes (2010)`))
datos %>% group_by(cluster) %>% summarise(Provincia)
datos<- datos %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia)) %>% arrange(Provincia)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
xtable(resumen2, type="latex",auto = TRUE)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T, encoding = "UTF-8")
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename(provincia_origen=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(provincia_origen,CH15_COD, cluster_origen)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH15==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch15)
ephinmi %>% filter(!is.na(SECTOR_ACT)) %>% group_by(SECTOR_ACT) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(SECTOR_ACT)]))) %>% arrange(-porcentaje)
ephinmi %>% filter(!is.na(CALIFICACION)) %>% group_by(CALIFICACION) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(CALIFICACION)]))) %>% arrange(-porcentaje)
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(provincia_origen,cluster_origen) %>% rename(provincia_destino=provincia_origen, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
cuadro_4<- ephinmi %>% group_by("Provincia"=provincia_destino) %>% summarise("Inmigrantes"=sum(PONDERA))
cuadro_5<- ephinmi %>% group_by("Provincia"=provincia_origen) %>% summarise("Emigrantes"=sum(PONDERA))
cuadro_6<- full_join(cuadro_4,cuadro_5)
######
prov_aglo<- prov_por_aglo %>% rename(provincia=provincia_destino)
ephtotal<- left_join(ephtotal, prov_aglo)
prov_cluster<- clustersprov %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",                              TRUE ~ Provincia))
#######
cuadro_7<- ephtotal %>% group_by("Provincia"=provincia) %>% summarise("Poblacion"=sum(PONDERA))
cuadro_8<- left_join(cuadro_6,cuadro_7)
cuadro_8<- left_join(cuadro_8,prov_cluster)
cuadro_8<- cuadro_8 %>% mutate(tasa_inmigracion=Inmigrantes/Poblacion, tasa_emigracion=Emigrantes/Poblacion, tasa_neta=tasa_inmigracion-tasa_emigracion)
cuadro_8$cluster<- factor(cuadro_8$cluster, levels = c("1","2","3"))
### Mapa de migraciony emigracion por provincia
datos_mapa_prov<- st_read( "./mapa/gadm36_ARG_1.shp")
datos_mapa_prov<- datos_mapa_prov %>% rename(Provincia=NAME_1)
datos_mapa_prov<- datos_mapa_prov %>% mutate(Provincia=case_when(Provincia=="Ciudad de Buenos Aires"  ~ "Ciudad Autónoma de Buenos Aires",
Provincia=="Tierra del Fuego"  ~"Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia))
cuadro_9<- cuadro_8 %>% mutate(tasa_inmigracion=formattable::percent(tasa_inmigracion),tasa_emigracion=formattable::percent(tasa_emigracion))
datos_mapa_prov<- inner_join(datos_mapa_prov, cuadro_9)
mapa_cluster<- ggplot(data = datos_mapa_prov) + geom_sf(aes(fill=cluster),color="BLACK", size=0.2 ) + labs(fill="Cluster:") + scale_fill_manual(values=color)+ theme(text=element_text(family="LM Roman 10"), panel.background = element_blank() , axis.text = element_blank(), axis.ticks = element_blank())
mapa_cluster
mapa_cluster<- ggplot(data = datos_mapa_prov) + geom_sf(aes(fill=cluster),color="BLACK", size=0.2 ) + labs(fill="Regiones:") + scale_fill_manual(values=color)+ theme(text=element_text(family="LM Roman 10"), panel.background = element_blank() , axis.text = element_blank(), axis.ticks = element_blank())
mapa_cluster
#Podemos ver la media de los parámetros para cada uno de los clusters
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Region 1"=X1,"Region 2"=X2, "Region 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Region 1`<- formattable::comma((resumen2$`Region 1`),2)
resumen2$`Region 2`<- formattable::comma((resumen2$`Region 2`),2)
resumen2$`Region 3`<- formattable::comma((resumen2$`Region 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Region 1`<- resumen2b$`Region 1`*100
resumen2b$`Region 2`<- resumen2b$`Region 2`*100
resumen2b$`Region 3`<- resumen2b$`Region 3`*100
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
#
#kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
#Podemos ver la media de los parámetros para cada uno de los clusters
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Region 1"=X1,"Region 2"=X2, "Region 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster" & Indicadores!="Habitantes (2010)" )
resumen2$`Region 1`<- formattable::comma((resumen2$`Region 1`),2)
resumen2$`Region 2`<- formattable::comma((resumen2$`Region 2`),2)
resumen2$`Region 3`<- formattable::comma((resumen2$`Region 3`),2)
resumen2b<- resumen2[14:16,]
resumen2b$`Region 1`<- resumen2b$`Region 1`*100
resumen2b$`Region 2`<- resumen2b$`Region 2`*100
resumen2b$`Region 3`<- resumen2b$`Region 3`*100
resumen2<- resumen2[1:13,]
resumen2<- bind_rows(resumen2, resumen2b)
#
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de Regiones resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", fill="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", color="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, show.legend=FALSE) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", color="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", group="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", fill="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
View(km_clusters)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6,) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización", fill="Regiones") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6,) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
km_clusters$cluster
km_clusters %>% rename(Regiones=cluster)
km_clusters[cluster]
View(km_clusters)
names(km_clusters)
names(km_clusters[1])
names(km_clusters[1])<-"Regiones"
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6,) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
names(km_clusters[1])<-"Regiones"
View(km_clusters)
names(km_clusters[1])
names(km_clusters[1])<- c("Regiones")
km_clusters<-  lapply(km_clusters, rename(Regiones=cluster))
km_clusters<-  lapply(km_clusters, rename("Regiones"="cluster"))
km_clusters[1]
names(km_clusters[1])
names(km_clusters[1])<- 'gool
names(km_clusters[])<- 'gool
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6,) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización",shape="gg") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6,) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de regiones resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por regiones")
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Cluster de origen de los migrantes")
cuadro_2<-ephinmi %>% group_by("Región"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Regiones de origen de los migrantes")
cuadro_2<-ephinmi %>% group_by("Región"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Regiones de origen de los migrantes")
cuadro_3<-ephinmi %>% group_by("Cluster"=cluster_destino) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_3,format = "markdown",caption = "Cluster de destino de los migrantes")
cuadro_8 %>% ggplot(mapping=aes(x=tasa_inmigracion,y = tasa_emigracion, label=Provincia, color=cluster)) + geom_point(show.legend = T) + geom_abline(intercept=-0,slope = 1)+ scale_color_manual(values = color)+ scale_y_continuous(labels = scales::percent_format(),limits = c(0,0.75))+scale_x_continuous(labels = scales::percent_format(),limits = c(0,0.75)) + xlab("Tasa de inmigración") + ylab("Tasa de emigración")+ labs(title = "Tasa de inmigración y emigración por provincia", color="Cluster:")+ ggrepel::geom_text_repel(size=3,family = "LM Roman 10",show.legend = F)+theme(text=element_text(family = "LM Roman 10"),axis.line = element_line(color="BLACK") ,axis.text = element_text(size=7, color = "BLACK") , panel.background = element_blank(),  axis.title = element_text(size=7), title = element_text(face = "bold"), legend.key = element_blank())
mapa_inmigracion<-ggplot(data = datos_mapa_prov) + geom_sf(aes(fill=tasa_inmigracion),color="BLACK", size=0.2 ) + viridis::scale_fill_viridis(label=scales::percent) + labs(fill="Tasa de inmigración:") + theme(text=element_text(family="LM Roman 10"), panel.background = element_blank() , axis.text = element_blank(), axis.ticks = element_blank())
mapa_emigracion<- ggplot(data = datos_mapa_prov) + geom_sf(aes(fill=tasa_emigracion),color="BLACK", size=0.2 ) + viridis::scale_fill_viridis(label=scales::percent) + labs(fill="Tasa de emigración:") + theme(text=element_text(family="LM Roman 10"), panel.background = element_blank() , axis.text = element_blank(), axis.ticks = element_blank())
gridExtra::grid.arrange(mapa_emigracion,mapa_inmigracion, ncol=2)
#Creación de regresores (feature engineerirng)
deflactor<- read_csv("deflactor.csv")
canastas<- read.csv("canasta.csv", sep=";", dec=".", header = TRUE)
ephtotal<- left_join(ephtotal, deflactor)
ephtotal<- ephtotal %>% mutate(HIJO=case_when(CH03==3~1,
TRUE ~ 0))
ephtotal<- ephtotal %>% group_by(ANO4, TRIMESTRE, CODUSU,NRO_HOGAR) %>% mutate(HIJO_HOGAR=sum(HIJO)) %>% ungroup()
ephtotal<- left_join(ephtotal,eph::adulto_equivalente)
ephtotal<- left_join(ephtotal,canastas)
ephtotal<- ephtotal %>% group_by(ANO4, TRIMESTRE, CODUSU,NRO_HOGAR) %>% mutate(EAF=sum(adequi)) %>% ungroup()
ephtotal<- ephtotal %>% mutate(CBAEQ=CBA*EAF,
CBTEQ=CBT*EAF)
ephtotal<- ephtotal %>% mutate(condicion=case_when(ITF<CBAEQ ~ "Indigente",
ITF>=CBAEQ & ITF<CBTEQ ~ "Pobre",
ITF>=CBTEQ ~ "No Pobre"))
ephtotal<- ephtotal %>% mutate(hombre=case_when(Sexo=="Hombres"~1,
Sexo=="Mujeres"~0),
edad=case_when(CH06=="-1" ~ as.integer(1),
TRUE ~ as.integer(CH06)),
edad2=(edad)^2,
ledad=log(edad),
medio=case_when(niveled=="Secundario\nCompleto"~ 1,
TRUE ~ 0),
alto=case_when(niveled=="Superior/Universitario\ncompleto"~ 1,
TRUE ~ 0),
IPCFR=IPCF/DEFLACTOR,
IPCFRL=log(IPCFR),
OCUPADO_BAJO=case_when(ESTADO==1 & CALIFICACION %in% c("No Calificados", "Operativos") ~ 1,
TRUE ~ 0),
OCUPADO_ALTO=case_when(ESTADO==1 & CALIFICACION %in% c("Profesionales","Técnicos") ~ 1,
TRUE ~ 0),
PROPIETARIO=case_when(II7==1 | II7==2 ~ 1,
TRUE ~ 0),
HIJO_DUMMY=case_when(HIJO_HOGAR==0 ~ 0,
TRUE ~ 1),
CASADO= case_when(CH07==1 | CH07==2 ~ 1 ,
TRUE ~ 0),
SOLTERO_C_HIJO=case_when(CASADO==0 & HIJO_DUMMY==1~1,
TRUE~0),
CASADO_S_HIJO=case_when(CASADO==1 & HIJO_DUMMY==0~ 1,
TRUE ~ 0),
CASADO_C_HIJO=case_when(CASADO==1 & HIJO_DUMMY==1~1,
TRUE~0),
POBRE=case_when(condicion %in% c("Pobre","Indigente")~1,
TRUE ~ 0),
SUBSIDIO=case_when(V5==1 ~ 1,
TRUE ~ 0)
)
cluster1_expulsion<- left_join(ephtotal,cluster_destino)
cluster1_expulsion<- left_join(cluster1_expulsion,cluster_nombres_eph_ch15)
cluster1_expulsion<- cluster1_expulsion %>%  filter(cluster_destino==1 | cluster_origen==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH03==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
cluster1_expulsion<- cluster1_expulsion %>% mutate(inmigrante=case_when(cluster_origen==1  &  CH15==3 &   cluster_destino!=1 ~1,
cluster_destino==1 & CH15 %in% c(1,2) ~0))
cluster1_expulsion<- cluster1_expulsion %>% filter(!is.na(inmigrante))
cluster_exp1<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto ,data = cluster1_expulsion,family = binomial(link="logit"))
cluster2_expulsion<- left_join(ephtotal,cluster_destino)
cluster2_expulsion<- left_join(cluster2_expulsion,cluster_nombres_eph_ch15)
cluster2_expulsion<- cluster2_expulsion %>%  filter(cluster_destino==2 | cluster_origen==2)
cluster2_expulsion<- cluster2_expulsion %>% filter(CH15%in% c(1,2,3))
cluster2_expulsion<- cluster2_expulsion %>% filter(CH03==1)
cluster2_expulsion<- cluster2_expulsion %>% mutate(inmigrante=case_when(cluster_origen==2  &  CH15==3 &   cluster_destino!=2~1,
cluster_destino==2 & CH15 %in% c(1,2) ~0))
cluster2_expulsion<- cluster2_expulsion %>% filter(!is.na(inmigrante))
cluster_exp2<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto, data= cluster2_expulsion,family = binomial(link = "logit"))
cluster3_expulsion<- left_join(ephtotal,cluster_destino)
cluster3_expulsion<- left_join(cluster3_expulsion,cluster_nombres_eph_ch15)
cluster3_expulsion<- cluster3_expulsion %>%  filter(cluster_destino==3 | cluster_origen==3)
cluster3_expulsion<- cluster3_expulsion %>% filter(CH15%in% c(1,2,3))
cluster3_expulsion<- cluster3_expulsion %>% filter(CH03==1)
cluster3_expulsion<- cluster3_expulsion %>% mutate(inmigrante=case_when(cluster_origen==3  &  CH15==3 &   cluster_destino!=3 ~1,
cluster_destino==3 & CH15 %in% c(1,2) ~0))
cluster3_expulsion<- cluster3_expulsion %>% filter(!is.na(inmigrante))
cluster_exp3<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto,data = cluster3_expulsion,family = binomial(link = "logit"))
#Grafico de regresiones en stargazer
stargazer(cluster_exp1,cluster_exp2, cluster_exp3,font.size = "small")
summary(cluster_exp1)
cluster1_atraccion<- left_join(ephtotal,cluster_destino)
cluster1_atraccion<- left_join(cluster1_atraccion,cluster_nombres_eph_ch15)
cluster1_atraccion <- cluster1_atraccion %>% filter(CH15==3)
cluster1_atraccion<- cluster1_atraccion %>% mutate(inmigrante=case_when(cluster_destino==1 ~1,
(cluster_destino==2 | cluster_destino==3)~0))
cluster1_atraccion<- cluster1_atraccion %>% filter(!is.na(inmigrante))
cluster1_atraccion %>% group_by(inmigrante) %>% count()
cluster_atr1<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto ,data = cluster1_atraccion,family = binomial(link="logit"))
summary(cluster_atr1)
cluster2_atraccion<- left_join(ephtotal,cluster_destino)
cluster2_atraccion<- left_join(cluster2_atraccion,cluster_nombres_eph_ch15)
cluster2_atraccion <- cluster2_atraccion %>% filter(CH15==3)
cluster2_atraccion<- cluster2_atraccion %>% mutate(inmigrante=case_when(cluster_destino==2 ~1,
(cluster_destino==1 | cluster_destino==3)~0))
cluster2_atraccion<- cluster2_atraccion %>% filter(!is.na(inmigrante))
cluster2_atraccion %>% group_by(inmigrante) %>% count()
cluster_atr2<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto ,data = cluster2_atraccion,family = binomial(link="logit"))
summary(cluster_atr2)
cluster3_atraccion<- left_join(ephtotal,cluster_destino)
cluster3_atraccion<- left_join(cluster3_atraccion,cluster_nombres_eph_ch15)
cluster3_atraccion <- cluster3_atraccion %>% filter(CH15==3)
cluster3_atraccion<- cluster3_atraccion %>% mutate(inmigrante=case_when(cluster_destino==3 ~1,
(cluster_destino==1 | cluster_destino==2)~0))
cluster3_atraccion<- cluster3_atraccion %>% filter(!is.na(inmigrante))
cluster3_atraccion %>% group_by(inmigrante) %>% count()
cluster_atr3<- glm(inmigrante ~  hombre + POBRE + SUBSIDIO + OCUPADO_BAJO+OCUPADO_ALTO +  SOLTERO_C_HIJO+CASADO_S_HIJO + CASADO_C_HIJO+ PROPIETARIO+  + edad + edad2  + medio + alto ,data = cluster3_atraccion,family = binomial(link="logit"))
summary(cluster_atr3)
stargazer(cluster_atr1,cluster_atr2, cluster_atr3,font.size = "small")
rm(list=ls())
