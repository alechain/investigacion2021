#estos sirven para formatear pa latex
library(stargazer)
library(xtable)
library(extrafont)
library(eph)
library(readxl)
datos<- read_csv("macroloc_para_r.csv",col_names = T, row.names(1))
datos3<- datos %>% select(-Provincia)
row.names(datos3)<- datos$Provincia
datos4<- datos3
#datos<- datos %>% mutate(`Densidad poblacional: Hab/km² (2010)`=log(`Densidad poblacional: Hab/km² (2010)`))
datos3<-datos3 %>% select(-c(`Densidad poblacional: Hab/km² (2010)`))
datos_norm<- scale(datos3)
factoextra::fviz_nbclust(datos_norm,kmeans, method="wss")+ geom_vline(xintercept = 3, colour="RED", linetype="dotted") + theme_classic() + labs(title="Numero óptimo de clusters") + xlab("Número de clusters") + ylab("WSS")+ theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster")
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2$`Cluster 1`[1]<- formattable::comma((resumen2$`Cluster 1`[1]),0)
resumen2$`Cluster 2`[1]<- formattable::comma((resumen2$`Cluster 2`[1]),0)
resumen2$`Cluster 3`[1]<- formattable::comma((resumen2$`Cluster 3`[1]),0)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
rm(list=ls())
setwd("/home/alejandrochain/Documentos/GitHub/investigacion2021/macrolocalizacion")
knitr::opts_chunk$set(echo = FALSE, dev="cairo_pdf")
library(readr)
library(tidyverse)
library(factoextra)
library(cluster)
library(fpc)
#estos sirven para formatear pa latex
library(stargazer)
library(xtable)
library(extrafont)
library(eph)
library(readxl)
datos<- read_csv("macroloc_para_r.csv",col_names = T, row.names(1))
datos3<- datos %>% select(-Provincia)
row.names(datos3)<- datos$Provincia
datos4<- datos3
#datos<- datos %>% mutate(`Densidad poblacional: Hab/km² (2010)`=log(`Densidad poblacional: Hab/km² (2010)`))
datos3<-datos3 %>% select(-c(`Densidad poblacional: Hab/km² (2010)`))
datos_norm<- scale(datos3)
factoextra::fviz_nbclust(datos_norm,kmeans, method="wss")+ geom_vline(xintercept = 3, colour="RED", linetype="dotted") + theme_classic() + labs(title="Numero óptimo de clusters") + xlab("Número de clusters") + ylab("WSS")+ theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster")
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2$`Cluster 1`[1]<- formattable::comma((resumen2$`Cluster 1`[1]),0)
resumen2$`Cluster 2`[1]<- formattable::comma((resumen2$`Cluster 2`[1]),0)
resumen2$`Cluster 3`[1]<- formattable::comma((resumen2$`Cluster 3`[1]),0)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
#agregamos a la base de datos original la denominación de cada cluster
datos<- cbind(datos,cluster=nomenclador)
clustersprov<-datos %>% select(Provincia,cluster)
datos %>% group_by(cluster) %>% summarise(habitantes=sum(`Habitantes (2010)`))
datos %>% group_by(cluster) %>% summarise(Provincia)
datos<- datos %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia)) %>% arrange(Provincia)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename("PROVINCIA"=Provincia)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(PROVINCIA,CH15_COD, cluster)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH15==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch15)
prueba<- ephinmi %>% filter(is.na(PROVINCIA))
prueba<- prueba %>% select(CH15, CH15_COD, PROVINCIA)
ephinmi %>% filter(!is.na(SECTOR_ACT)) %>% group_by(SECTOR_ACT) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(SECTOR_ACT)]))) %>% arrange(-porcentaje)
ephinmi %>% filter(!is.na(CALIFICACION)) %>% group_by(CALIFICACION) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(CALIFICACION)]))) %>% arrange(-porcentaje)
# en ctes
califctes<- ephinmi %>% filter(!is.na(CALIFICACION) & PROVINCIA=="Corrientes")
califctes  %>% group_by(CALIFICACION) %>% summarise(total=sum(PONDERA)/sum(califctes$PONDERA))%>% arrange(-total)
prueba<- ephinmi %>% filter(!is.na(PROVINCIA)) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(PROVINCIA)])),2))
prueba2<- ephinmi %>% filter(!is.na(PROVINCIA) & CH06>=18) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(PROVINCIA) & CH06>=18])),2))
prueba3<- ephinmi %>% filter(!is.na(PROVINCIA) & CH06>=18) %>% group_by(AGLOMERADO2) %>%
summarise(sum(PONDERA))
ephnuevoinmi<- ephtotal %>% filter(CH16==3)
ephnuevoinmi<- left_join(ephnuevoinmi, provincia2)
prueba<- ephnuevoinmi %>% filter(!is.na(PROVINCIA))
prueba<- prueba %>% filter(!is.na(PROVINCIA)) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(prueba$PONDERA)),2))
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
View(prov_por_aglo)
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
ephinmi<- left_join(ephinmi,prov_por_aglo)
View(cluster_nombres_eph)
View(cluster_nombres_eph_ch15)
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
ephinmi<- left_join(ephinmi,prov_por_aglo)
left_join(prov_por_aglo,cluster_nombres_eph)
cluster_origen<- cluster_nombres_eph %>% select(PROVINCIA,cluster)
cluster_origen<- cluster_nombres_eph %>% select(PROVINCIA,cluster) %>% rename(provincia_origen=PROVINCIA)
cluster_origen<- left_join(prov_por_aglo,cluster_origen)
View(cluster_origen)
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster) %>% rename(provincia_origen=PROVINCIA)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster) %>% rename(provincia_origen=PROVINCIA)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster) %>% rename(provincia_destino=PROVINCIA)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
View(cluster_destino)
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster) %>% rename(provincia_destino=PROVINCIA, cluster_destino=cluster)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename("PROVINCIA"=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(PROVINCIA,CH15_COD, cluster)
ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename("PROVINCIA"=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(PROVINCIA,CH15_COD, cluster_origen)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH15==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch15)
prueba<- ephinmi %>% filter(is.na(PROVINCIA))
prueba<- prueba %>% select(CH15, CH15_COD, PROVINCIA)
ephinmi %>% filter(!is.na(SECTOR_ACT)) %>% group_by(SECTOR_ACT) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(SECTOR_ACT)]))) %>% arrange(-porcentaje)
ephinmi %>% filter(!is.na(CALIFICACION)) %>% group_by(CALIFICACION) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(CALIFICACION)]))) %>% arrange(-porcentaje)
# en ctes
califctes<- ephinmi %>% filter(!is.na(CALIFICACION) & PROVINCIA=="Corrientes")
califctes  %>% group_by(CALIFICACION) %>% summarise(total=sum(PONDERA)/sum(califctes$PONDERA))%>% arrange(-total)
prueba<- ephinmi %>% filter(!is.na(PROVINCIA)) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(PROVINCIA)])),2))
prueba2<- ephinmi %>% filter(!is.na(PROVINCIA) & CH06>=18) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(PROVINCIA) & CH06>=18])),2))
prueba3<- ephinmi %>% filter(!is.na(PROVINCIA) & CH06>=18) %>% group_by(AGLOMERADO2) %>%
summarise(sum(PONDERA))
ephnuevoinmi<- ephtotal %>% filter(CH16==3)
ephnuevoinmi<- left_join(ephnuevoinmi, provincia2)
prueba<- ephnuevoinmi %>% filter(!is.na(PROVINCIA))
prueba<- prueba %>% filter(!is.na(PROVINCIA)) %>% group_by(PROVINCIA) %>% summarise(formattable::percent((total_migrantes=sum(PONDERA)/sum(prueba$PONDERA)),2))
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster_origen) %>% rename(provincia_destino=PROVINCIA, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Porcentaje de migrantes por cluster")
cuadro_3<-ephinmi %>% group_by("Cluster"=cluster_destino) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Porcentaje de migrantes por cluster")
ephinmi<- ephinmi %>% filter(!is.na(PROVINCIA))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(PROVINCIA,cluster_origen) %>% rename(provincia_destino=PROVINCIA, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
View(cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
ephtotal<- read_rds("ephtotal.Rds")
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename("PROVINCIA"=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(PROVINCIA,CH15_COD, cluster_origen)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename(provincia_origen=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(provincia_origen,CH15_COD, cluster_origen)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH15==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch15)
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(provincia_origen,cluster_origen) %>% rename(provincia_destino=provincia_origen, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Porcentaje de migrantes por cluster")
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Porcentaje de migrantes por cluster")
cuadro_3<-ephinmi %>% group_by("Cluster"=cluster_destino) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_3,format = "markdown",caption = "Cluster de destino de los migrantes")
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Cluster de origen de los migrantes")
cuadro_3<-ephinmi %>% group_by("Cluster"=cluster_destino) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_3,format = "markdown",caption = "Cluster de destino de los migrantes")
cuadro_3 %>% filter(Cluster==1) %>% pull()
setwd("/home/alejandrochain/Documentos/GitHub/investigacion2021/macrolocalizacion")
knitr::opts_chunk$set(echo = FALSE, dev="cairo_pdf")
library(readr)
library(tidyverse)
library(factoextra)
library(cluster)
library(fpc)
#estos sirven para formatear pa latex
library(stargazer)
library(xtable)
library(extrafont)
library(eph)
library(readxl)
datos<- read_csv("macroloc_para_r.csv",col_names = T, row.names(1))
datos3<- datos %>% select(-Provincia)
row.names(datos3)<- datos$Provincia
datos4<- datos3
#datos<- datos %>% mutate(`Densidad poblacional: Hab/km² (2010)`=log(`Densidad poblacional: Hab/km² (2010)`))
datos3<-datos3 %>% select(-c(`Densidad poblacional: Hab/km² (2010)`))
datos_norm<- scale(datos3)
factoextra::fviz_nbclust(datos_norm,kmeans, method="wss")+ geom_vline(xintercept = 3, colour="RED", linetype="dotted") + theme_classic() + labs(title="Numero óptimo de clusters") + xlab("Número de clusters") + ylab("WSS")+ theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
set.seed(1118)
km_clusters<- kmeans(datos_norm,centers = 3,iter.max = 1000,nstart = 2000)
nomenclador<- km_clusters$cluster
resumen_cluster<-aggregate(datos3,by = list(cluster=km_clusters$cluster),FUN = median)
resumen_g<-resumen_cluster %>% pivot_longer(-cluster)
resumen2<-data.frame(t(resumen_cluster))
resumen2<- resumen2 %>% rename("Cluster 1"=X1,"Cluster 2"=X2, "Cluster 3"=X3) %>% rownames_to_column()
resumen2<- resumen2 %>% rename("Indicadores"=rowname)
resumen2<- resumen2 %>% filter(Indicadores!="cluster")
resumen2$`Cluster 1`<- formattable::comma((resumen2$`Cluster 1`),2)
resumen2$`Cluster 2`<- formattable::comma((resumen2$`Cluster 2`),2)
resumen2$`Cluster 3`<- formattable::comma((resumen2$`Cluster 3`),2)
resumen2$`Cluster 1`[1]<- formattable::comma((resumen2$`Cluster 1`[1]),0)
resumen2$`Cluster 2`[1]<- formattable::comma((resumen2$`Cluster 2`[1]),0)
resumen2$`Cluster 3`[1]<- formattable::comma((resumen2$`Cluster 3`[1]),0)
kableExtra::kable(resumen2,format = "markdown",caption = "Resumen de indicadores por cluster")
#xtable(resumen2, type="latex",auto = TRUE)
#agregamos a la base de datos original la denominación de cada cluster
datos<- cbind(datos,cluster=nomenclador)
clustersprov<-datos %>% select(Provincia,cluster)
datos %>% group_by(cluster) %>% summarise(habitantes=sum(`Habitantes (2010)`))
datos %>% group_by(cluster) %>% summarise(Provincia)
datos<- datos %>% mutate(Provincia=case_when(Provincia=="Tierra del Fuego, Antártida e Islas del Atlántico Sur (4)"~ "Tierra del Fuego, Antártida e Islas del Atlántico Sur",
TRUE~Provincia)) %>% arrange(Provincia)
fviz_cluster(km_clusters, data = datos4,
palette = c("RED", "BLUE","GREEN"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
labelsize = 6, ) + theme_classic(base_family ="LM Roman 10" ) + labs(title="Plot de clusters resultantes de la macrolocalización") + theme(text=element_text(family = "LM Roman 10"), title = element_text(face = "bold"))
ephtotal<- read_rds("ephtotal.Rds")
### provincia
provincia<- read.csv("provincias.csv", sep=",", header = T)
provincia<- provincia %>% arrange(PROVINCIA)
provincia1<- provincia %>% select(PROVINCIA,CH15_COD)
provincia2<- provincia %>% select(PROVINCIA,CH16_COD)
#
nombredato<- datos %>% select(Provincia)
nombredato
name_prov_para_datos<-bind_cols(nombredato, provincia) %>% select(-PROVINCIA)
datos<- left_join(datos,name_prov_para_datos)
#
cluster_nombres_eph<- datos %>% select(c("Provincia","cluster","CH15_COD","CH16_COD"))
cluster_nombres_eph<- cluster_nombres_eph %>% rename(provincia_origen=Provincia, cluster_origen=cluster)
cluster_nombres_eph_ch15<-cluster_nombres_eph %>% select(provincia_origen,CH15_COD, cluster_origen)
##############################################################################################
ephinmi<- ephtotal %>% filter(CH15==3)
ephinmi<- left_join(ephinmi, cluster_nombres_eph_ch15)
ephinmi %>% filter(!is.na(SECTOR_ACT)) %>% group_by(SECTOR_ACT) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(SECTOR_ACT)]))) %>% arrange(-porcentaje)
ephinmi %>% filter(!is.na(CALIFICACION)) %>% group_by(CALIFICACION) %>% summarise(porcentaje=formattable::percent (sum(PONDERA)/sum(ephinmi$PONDERA[!is.na(CALIFICACION)]))) %>% arrange(-porcentaje)
ephinmi<- ephinmi %>% filter(!is.na(provincia_origen))
prov_por_aglo<- read_csv("provincias_por_aglomerado.csv")
cluster_destino<- cluster_nombres_eph %>% select(provincia_origen,cluster_origen) %>% rename(provincia_destino=provincia_origen, cluster_destino=cluster_origen)
cluster_destino<- left_join(prov_por_aglo,cluster_destino)
ephinmi<- left_join(ephinmi,cluster_destino)
cuadro_2<-ephinmi %>% group_by("Cluster"=cluster_origen) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_2,format = "markdown",caption = "Cluster de origen de los migrantes")
cuadro_3<-ephinmi %>% group_by("Cluster"=cluster_destino) %>% summarise("Porcentaje"=formattable::percent((sum(PONDERA)/sum(ephinmi$PONDERA))))
kableExtra::kable(cuadro_3,format = "markdown",caption = "Cluster de destino de los migrantes")
View(cluster_nombres_eph_ch15)
View(cluster_destino)
cluster1_expulsion<- left_join(ephtotal,cluster_destino)
cluster1_expulsion<- left_join(ephtotal,cluster_destino)  %>%  filter(cluster_destino==1)
unique(cluster1_expulsion)
unique(cluster1_expulsion$CH15)
class(cluster1_expulsion$CH15)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
cluster1_expulsion<- left_join(ephtotal,cluster_destino)  %>%  filter(cluster_destino==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
View(cluster_nombres_eph_ch15)
View(cluster_nombres_eph)
cluster1_expulsion<- left_join(ephtotal,cluster_destino)
cluster1_expulsion<- left_join(cluster1_expulsion,cluster_nombres_eph_ch15)
cluster1_expulsion<- cluster1_expulsion %>%  filter(cluster_destino==1 | cluster_origen==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
cluster1_expulsion<- cluster1_expulsion %>% mutate(inmigrante=case_when(cluster_origen==1~1,
CH15 %in% c(1,2) & cluster_origen!=1 ~0))
cluster1_expulsion<- cluster1_expulsion %>% filter(!is.na(inmigrante))
table(cluster1_expulsion$inmigrante)
cluster1_expulsion<- left_join(ephtotal,cluster_destino)
cluster1_expulsion<- left_join(cluster1_expulsion,cluster_nombres_eph_ch15)
cluster1_expulsion<- cluster1_expulsion %>%  filter(cluster_destino==1 | cluster_origen==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
cluster1_expulsion<- cluster1_expulsion %>% mutate(inmigrante=case_when(cluster_origen==1~1,
CH15 %in% c(1,2) ~0))
cluster1_expulsion<- cluster1_expulsion %>% filter(!is.na(inmigrante))
table(cluster1_expulsion$inmigrante)
table(cluster1_expulsion$inmigrante,cluster1_expulsion$AGLOMERADO)
table(cluster1_expulsion$inmigrante,cluster1_expulsion$AGLOMERADO2)
table(cluster1_expulsion$inmigrante,cluster1_expulsion$cluster_destino)
library(tidyverse)
library(readxl)
library(broom ) #porque voy a trabajar con regresiones y esta libreria convierte las regresiones y dataframes
library(scales)
library(modelsummary)
library(wooldridge)
library(ggplot2)
library(scales)
library(kableExtra)
library(stargazer)
injury <- read.csv("data/injury.csv")
?injury #para saber que variables contiene
#arreglamos un poco la base
injury_raw <- read.csv("data/injury.csv")
injury <- injury_raw %>%
filter (ky==1) %>%
rename(after_1980= afchnge,
duration = durat,
log_duration = ldurat)
ggplot (injury, mapping = aes(x = log_duration)) +
geom_histogram(binwidth = .5, color = "white", boundary = 0) +
scale_x_continuous(labels = trans_format("exp", format=round)) +
facet_wrap(vars(highearn))
ggplot(injury, mapping = aes(x= highearn, y = log_duration)) +
stat_summary(geom = "pointrange", fun.data = "mean_se", fun.args = list(mult =1.96)) +
facet_wrap(vars(after_1980))
#stat_summary(geom = "pointrange", fun.data = "mean_se", fun.args = list(mult =1.96)): para graficar el
#intervalo de confianza, 1.96 para 95% de nivel de confianza
plot_data <- injury %>%
mutate(highearn = factor(highearn, labels = c("Menor salario", "Mayor salario")),
after_1980 = factor(after_1980, labels = c("Antes de 1980", "Despues de 1980"))) %>%
group_by(highearn, after_1980) %>%
summarize(mean_duration = mean(log_duration),
se_duration = sd(log_duration) / sqrt(n()),
upper = mean_duration + (1.96 * se_duration),
lower = mean_duration + (-1.96 * se_duration))
ggplot(plot_data, aes(x = highearn, y = mean_duration)) +
geom_pointrange(aes(ymin = lower, ymax = upper),
color = "darkgreen", size = 1) +
facet_wrap(vars(after_1980))
ggplot(plot_data, aes(x = after_1980, y = mean_duration, color = highearn)) +
geom_pointrange(aes(ymin = lower, ymax = upper), size = 1) +
geom_line(aes(group = highearn))
diffs <- injury %>%
group_by(after_1980, highearn) %>%
summarize(mean_duration= mean(log_duration))
diffs
before_treatment <- diffs %>%
filter(after_1980 == 0, highearn == 1) %>%
pull(mean_duration)
after_treatment <- diffs %>%
filter(after_1980 == 1, highearn == 1) %>%
pull(mean_duration)
before_control <- diffs %>%
filter(after_1980 == 0, highearn == 0) %>%
pull(mean_duration)
after_control <- diffs %>%
filter(after_1980 == 1, highearn == 0) %>%
pull(mean_duration)
#B-A
diff_treatment_before_after <- after_treatment - before_treatment
#D-C
diff_control_before_after <- after_control - before_control
#(B-A) - (D-C) O (B-D) -(A-C)
diff_diff <- diff_treatment_before_after - diff_control_before_after
ggplot (data = diffs, aes(x= after_1980, y=mean_duration,
color= highearn )) +
geom_point() +
geom_line(aes(group = highearn)) +
annotate(geom = "segment", x = 0, xend=1,
y = before_treatment, yend = after_treatment - diff_diff,
linetype = "dotted") +
annotate(geom="segment", x= 1 , xend = 1,
y= after_treatment - diff_diff, yend= after_treatment,
color = "red")
ggplot(diffs, aes(x = as.factor(after_1980),
y = mean_duration,
color = as.factor(highearn))) +
geom_point() +
geom_line(aes(group = as.factor(highearn))) +
# If you use these lines you'll get some extra annotation lines and
# labels. The annotate() function lets you put stuff on a ggplot that's not
# part of a dataset. Normally with geom_line, geom_point, etc., you have to
# plot data that is in columns. With annotate() you can specify your own x and
# y values.
annotate(geom = "segment", x = "0", xend = "1",
y = before_treatment, yend = after_treatment - diff_diff,
linetype = "dashed", color = "grey50") +
annotate(geom = "segment", x = "1", xend = "1",
y = after_treatment, yend = after_treatment - diff_diff,
linetype = "dotted", color = "blue") +
annotate(geom = "label", x = "1", y = after_treatment - (diff_diff / 2),
label = "Program effect", size = 3)
model_simple <- lm(log_duration ~ highearn + after_1980 +
(highearn *after_1980),
data=injury)
tidy(model_simple)
model_complex <- lm(log_duration ~ highearn + after_1980 +
(highearn *after_1980) + male + married +age + hosp,
data=injury)
tidy(model_complex)
modelsummary(list(model_simple, model_complex))
stargazer(model_simple, model_complex)
stargazer(modelo_simple,title = "HOLA")
stargazer(model_simple,title = "HOLA")
model_simple
stargazer(model_simple)
stargazer(model_simple, align = TRUE)
stargazer(model_complex, align = TRUE)
modelsummary(list(model_simple, model_complex))
modelsummary(list(model_simple, model_complex))
model_complex <- lm(log_duration ~ highearn + after_1980 +
(highearn *after_1980) + male + married +age + hosp,
data=injury)
tidy(model_complex)
modelsummary(list(model_simple, model_complex),output = "markdown")
modelsummary(list(model_simple, model_complex),output = "markdown",models = c("Modelo simple","Modelo Probit"))
modelsummary(list(model_simple, model_complex),output = "markdown",models =list("Modelo simple","Modelo Probit"))
modelsummary(list(model_simple, model_complex),output = "latex" ,title = "Regresiones",)
summary(list(model_simple, model_complex),output = "latex" ,title = "Regresiones")
modelsummary(list(model_simple, model_complex),output = "latex" ,title = "Regresiones")
modelsummary(list(model_simple, model_complex),output = "kableExtra" ,title = "Regresiones")
stargazer(model_complex)
stargazer(model_complex, model_simple)
stargazer(model_complex, model_simple,type = "latex")
cluster1_expulsion<- left_join(ephtotal,cluster_destino)
cluster1_expulsion<- left_join(cluster1_expulsion,cluster_nombres_eph_ch15)
cluster1_expulsion<- cluster1_expulsion %>%  filter(cluster_destino==1 | cluster_origen==1)
cluster1_expulsion<- cluster1_expulsion %>% filter(CH15%in% c(1,2,3))
cluster1_expulsion<- cluster1_expulsion %>% mutate(inmigrante=case_when(cluster_origen==1~1,
CH15 %in% c(1,2) ~0))
cluster1_expulsion<- cluster1_expulsion %>% filter(!is.na(inmigrante))
cluster1_expulsion<- cluster
